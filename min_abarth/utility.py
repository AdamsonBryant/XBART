# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_utility')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_utility')
    _utility = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utility', [dirname(__file__)])
        except ImportError:
            import _utility
            return _utility
        try:
            _mod = imp.load_module('_utility', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _utility = swig_import_helper()
    del swig_import_helper
else:
    import _utility
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def ini_xinfo(X, N, p):
    return _utility.ini_xinfo(X, N, p)
ini_xinfo = _utility.ini_xinfo

def ini_xinfo_sizet(X, N, p):
    return _utility.ini_xinfo_sizet(X, N, p)
ini_xinfo_sizet = _utility.ini_xinfo_sizet

def row_sum(X, output):
    return _utility.row_sum(X, output)
row_sum = _utility.row_sum

def col_sum(X, output):
    return _utility.col_sum(X, output)
col_sum = _utility.col_sum

def vec_sum(vector, sum):
    return _utility.vec_sum(vector, sum)
vec_sum = _utility.vec_sum

def vec_sum_sizet(vector, sum):
    return _utility.vec_sum_sizet(vector, sum)
vec_sum_sizet = _utility.vec_sum_sizet

def sum_squared(v):
    return _utility.sum_squared(v)
sum_squared = _utility.sum_squared

def sum_vec(v):
    return _utility.sum_vec(v)
sum_vec = _utility.sum_vec

def seq_gen_std(start, end, length_out, vec):
    return _utility.seq_gen_std(start, end, length_out, vec)
seq_gen_std = _utility.seq_gen_std

def seq_gen_std_categorical(start, end, length_out, vec, output):
    return _utility.seq_gen_std_categorical(start, end, length_out, vec, output)
seq_gen_std_categorical = _utility.seq_gen_std_categorical

def seq_gen_std_2(start, end, length_out, vec):
    return _utility.seq_gen_std_2(start, end, length_out, vec)
seq_gen_std_2 = _utility.seq_gen_std_2

def calculate_y_cumsum_std(y, N_y, y_sum, ind, y_cumsum, y_cumsum_inv):
    return _utility.calculate_y_cumsum_std(y, N_y, y_sum, ind, y_cumsum, y_cumsum_inv)
calculate_y_cumsum_std = _utility.calculate_y_cumsum_std

def compute_partial_sum_adaptive(y_std, candidate_index, y_cumsum, Xorder_std, var):
    return _utility.compute_partial_sum_adaptive(y_std, candidate_index, y_cumsum, Xorder_std, var)
compute_partial_sum_adaptive = _utility.compute_partial_sum_adaptive

def compute_partial_sum_adaptive_newXorder(y_std, candidate_index, y_cumsum, Xorder_std, var, Xorder_next_index, Xorder_firstline, N_Xorder, possible_cutpoints, N_y, X_std):
    return _utility.compute_partial_sum_adaptive_newXorder(y_std, candidate_index, y_cumsum, Xorder_std, var, Xorder_next_index, Xorder_firstline, N_Xorder, possible_cutpoints, N_y, X_std)
compute_partial_sum_adaptive_newXorder = _utility.compute_partial_sum_adaptive_newXorder

def subnode_mean(y, Xorder, split_var):
    return _utility.subnode_mean(y, Xorder, split_var)
subnode_mean = _utility.subnode_mean

def subnode_mean_newXorder(y, Xorder_full, Xorder_next_index, split_var, Xorder_firstline, N_Xorder):
    return _utility.subnode_mean_newXorder(y, Xorder_full, Xorder_next_index, split_var, Xorder_firstline, N_Xorder)
subnode_mean_newXorder = _utility.subnode_mean_newXorder

def sq_vec_diff(v1, v2):
    return _utility.sq_vec_diff(v1, v2)
sq_vec_diff = _utility.sq_vec_diff

def sq_vec_diff_sizet(v1, v2):
    return _utility.sq_vec_diff_sizet(v1, v2)
sq_vec_diff_sizet = _utility.sq_vec_diff_sizet

def recover_Xorder(Xorder, Xorder_firstline, Xorder_next_index, Xorder_new):
    return _utility.recover_Xorder(Xorder, Xorder_firstline, Xorder_next_index, Xorder_new)
recover_Xorder = _utility.recover_Xorder

def create_y_sort(Y_sort, y_std, Xorder, Xorder_next_index, Xorder_firstline, var):
    return _utility.create_y_sort(Y_sort, y_std, Xorder, Xorder_next_index, Xorder_firstline, var)
create_y_sort = _utility.create_y_sort

def create_y_sort_2(Y_sort, possible_cutpoints, X_std, y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y):
    return _utility.create_y_sort_2(Y_sort, possible_cutpoints, X_std, y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y)
create_y_sort_2 = _utility.create_y_sort_2

def create_y_sort_3(Y_sort, possible_cutpoints, X_std, y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y, candidate_index):
    return _utility.create_y_sort_3(Y_sort, possible_cutpoints, X_std, y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y, candidate_index)
create_y_sort_3 = _utility.create_y_sort_3

def compute_partial_sum(Y, Xorder, var, y_cumsum):
    return _utility.compute_partial_sum(Y, Xorder, var, y_cumsum)
compute_partial_sum = _utility.compute_partial_sum

def compute_partial_sum_newXorder(y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y, y_cumsum, possible_cutpoints, X_std):
    return _utility.compute_partial_sum_newXorder(y_std, Xorder, Xorder_next_index, Xorder_firstline, var, N_y, y_cumsum, possible_cutpoints, X_std)
compute_partial_sum_newXorder = _utility.compute_partial_sum_newXorder

def partial_sum_y(y, Xorder, start, end, y_sum, var):
    return _utility.partial_sum_y(y, Xorder, start, end, y_sum, var)
partial_sum_y = _utility.partial_sum_y
# This file is compatible with both classic and new-style classes.


