// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// predict_tree
Rcpp::List predict_tree(Rcpp::List trees, arma::mat Xnew);
RcppExport SEXP _SpikySmoothTrees_predict_tree(SEXP treesSEXP, SEXP XnewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_tree(trees, Xnew));
    return rcpp_result_gen;
END_RCPP
}
// singletree
Rcpp::List singletree(arma::vec y, arma::mat X, int depth, int max_depth, int Nmin, double tau, double sigma, double alpha, double beta);
RcppExport SEXP _SpikySmoothTrees_singletree(SEXP ySEXP, SEXP XSEXP, SEXP depthSEXP, SEXP max_depthSEXP, SEXP NminSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type Nmin(NminSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(singletree(y, X, depth, max_depth, Nmin, tau, sigma, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _SpikySmoothTrees_test(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_SpikySmoothTrees_predict_tree", (DL_FUNC) &_SpikySmoothTrees_predict_tree, 2},
    {"_SpikySmoothTrees_singletree", (DL_FUNC) &_SpikySmoothTrees_singletree, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpikySmoothTrees(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
